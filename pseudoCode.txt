MAIN
    - Inputs: argc, argv
    - Output: integer

	//parse the command line arguments
	//we have an integer argc that is the number of arguments including the command to run Mqg
	//we also have a pointer to an array of strings (char pointers) for the flags

	INITIALIZE variables to hold command line arguments
	FOR (each element of argv) //use while loop though!
	    CASE "-q": set number of queues variable
	    CASE "-r": set number of requests variable
	    CASE "-min": set min int value
	    CASE "-max": set max int value
	END FOR

	//make the array of struct pointers
	ALLOCATE dynamic array of queueStruct* types (size is q*sizeof(queueStruct*))

	//generate a list of q-1 random numbers between 0 and r
	ALLOCATE dynamic array to hold them
	FOR each element
	    FUNCTION getRand()
	END FOR

	//sort it and use it to calculate the number or integers per queue
	QSORT the array
	SET the number of ints for the first queue to the first array element
	FOR all middle queues
	    subtract current element from previous and set to queue numElements
	END FOR
	SET number of ints for last queue to 100 - last array element

	//fill in each sub array
	FOR each queue
	    ALLOCATE dynamic array for queue with appropriate number of int types

	    FOR (each element in queue)
		getRand() and set to int value in element
	    END FOR

            sumQueue() and set to corresponding element in sum-array
	    PRINT the sum for this queue

	    IF this is first queue
		SET min sum index to this queues index
	    END IF

	    IF (this sum is less than current min sum)
		set this sum to new min
	    END IF	    
	END FOR

	//we now have a pointer to an array of integer pointers (the queues)
	//the integer pointers point to the int elements of each queue
	//note that to reference a queue we will use outsideArray[queue index]
	//where outsideArray is of type int** 
	//to reference an element of a queue we will use *(outsideArray[queue index])[element index]
	//we also have an array of integers that hold the sum of each queue

	printQueue() for queue with largest sum

	FREE all dynamic data
END MAIN



FUNCTION getRand()
    - Inputs: minimum int value, maximum int value
    - Outputs: integer between min and max
    Uses mod() and addition to generate "random" number between min and max
END FUNCTION



FUNCTION sumQueue()
    - Inputs: pointer to queue to be summed
    - Outputs: int type sum
    Iterates through the elements in the queue adding them together
END FUNCTION



FUNCTION printQueue()
    - Inputs: pointer to the queue
    - Outputs: none
    Iterates through the elements in the queue printing them out
END FUNCTION
